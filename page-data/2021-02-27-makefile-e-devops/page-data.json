{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-02-27-makefile-e-devops/","result":{"data":{"site":{"siteMetadata":{"title":"Capitanfuturo"}},"markdownRemark":{"id":"f56c0db8-5442-5f53-bd2f-faf5d0ae8381","excerpt":"ðŸ’» Introduzione Oltre ad Ansible, per motivi lavorativi mi sono messo a giocare con infrastrutture e architetture basate su container docker in ambito dockerâ€¦","html":"<h2>ðŸ’» Introduzione</h2>\n<p>Oltre ad Ansible, per motivi lavorativi mi sono messo a giocare con infrastrutture e architetture basate su container docker in ambito docker-compose. Lo so che chi sta leggendo penserÃ  che attualmente esiste solo kubernates per queste cose perÃ² mi sono dovuto ricredere anche io su questo tema.</p>\n<p>Docker-compose Ã¨ un ottimo strumento, direi un passo abilitante e che consiglio a tutti per entrare nellâ€™ottica non solo dei microservizi, intesi nello specifico come ristrutturazione di monoliti software ma anche per iniziare a spostarsi nelle competenze devops, nella parte di netowrking e infrastrutture.</p>\n<p>Ma bando alle ciance, perchÃ¨ <strong>Makefile</strong>? Uno strumento che chi come me ha sempre visto di fianco alle guide per compilarsi qualche pacchetto linux quando sulla tua distro preferita, nel mio caso Slackwareâ€¦ perchÃ¨?</p>\n<p>Beh, ultimamente <strong>make</strong> Ã¨ tornato in voga nellâ€™ambito della gestione dei container per alcuni pregi:</p>\n<ul>\n<li>Ã¨ facilmente <strong>portabile</strong></li>\n<li>Ã¨ uno strumento per <strong>eseguire task ripetitivi</strong> (vedi compilazione)</li>\n<li>non necessita di particolari dipendenze, anzi Ã¨ <strong>out-of-the-box</strong> nel caso di sistemi GNU\\Linux e affini.</li>\n<li><strong>descrive le dipendenze</strong> tra i vari target</li>\n</ul>\n<h2>Storia</h2>\n<p>Make Ã¨ uno strumento scritto nel 1976 da Stuart Feldman nei Bell Labs. Serve per compilare codice C / C++ e puÃ² essere paraganato a Maven, Ant, Gradle per Java, (i linguaggi interpretati come Javascript e Python non necessitano di questi strumenti).</p>\n<h2>Makefile</h2>\n<p><code class=\"language-text\">Makefile</code> Ã¨ il file che contiene le istruzioni da far eseguire a <code class=\"language-text\">make</code>. Eâ€™ come il pom.xml per maven. Per provare il tutto basterÃ  quindi avere un terminale linux e un editor di testo.</p>\n<h2>Rules</h2>\n<p>Essenzialmente un Makefile descrive una serie di regole che hanno questa struttura base:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">target1 target2 target3<span class=\"token operator\">:</span> prereq1 prereq2\n commands\n commands\n commands</code></pre></div>\n<p>dove:</p>\n<ul>\n<li><em>target1</em> sono i file di <strong>output</strong> da produrre</li>\n<li><em>prereq1 â€¦ prereqn</em> sono gli n-file dai quali target dipende. Sono le <strong>dipendenze di target</strong></li>\n<li><em>commands</em> sono i comandi necessari per produrre target</li>\n</ul>\n<p>Spesso troverete i task piÃ¹ generici in testa al file, mentre man mano che si hanno task piÃ¹ complessi nel fondo in un orientamento top-down</p>\n<h3>Hello World</h3>\n<p>Lâ€™esempio piÃ¹ semplice Ã¨ il classico Hello World</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">hello<span class=\"token operator\">:</span>\n @echo <span class=\"token string\">\"Hello World\"</span></code></pre></div>\n<p>se eseguiamo il comando <code class=\"language-text\">make hello</code> vedremo il risultato atteso.</p>\n<h3>Hello World - Attenzione</h3>\n<p>Se invece proviamo questo esempio:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">hello<span class=\"token operator\">:</span>\n touch hello</code></pre></div>\n<p>e lo eseguiamo due volte vedremo che la seconda esecuzione non verrÃ  eseguita perchÃ¨ abbiamo creato un file chiamato hello che Ã¨ il target della rule hello.</p>\n<h3>Rule di default</h3>\n<p>La rule di default puÃ² essere impostata aggiungendo allâ€™inizio del file questa costante riservata</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>DEFAULT_GOAL <span class=\"token operator\">:</span><span class=\"token operator\">=</span> hello</code></pre></div>\n<h2>Costanti</h2>\n<p>Makefile permette di dichiarare le costanti. Solitamente a inizio del file makefile attraverso la seguente sintassi. Nellâ€™esempio che segue dichiaro la costante <em>ECHO_HELLO_WORLD</em>. Le costanti sono per convenzione dichiarati tutti in maiuscolo</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>DEFAULT_GOAL <span class=\"token operator\">:</span><span class=\"token operator\">=</span> echo1\n\nECHO_HELLO_WORLD <span class=\"token operator\">:</span><span class=\"token operator\">=</span> @echo <span class=\"token string\">\"Hello World\"</span>\n\necho1<span class=\"token operator\">:</span>\n $<span class=\"token punctuation\">(</span>ECHO_HELLO_WORLD<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Variabili</h2>\n<p>Le variabili sono definite come nellâ€™esempio che segue:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>DEFAULT_GOAL <span class=\"token operator\">:</span><span class=\"token operator\">=</span> echo1\n\nx <span class=\"token operator\">=</span> hello\ny <span class=\"token operator\">=</span> world\n\necho1<span class=\"token operator\">:</span>\n @echo $<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>PHONY targets</h2>\n<p>Come abbiamo visto, make nasce per compilare dei file, ma per i nostri scopi spesso i target che scriviamo non producono file e vogliamo che siano eseguiti sempre. Per fare questo possiamo usare il target PHONY aggiungendo i nostri target come prerequisiti di questo target particolare.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>PHONY<span class=\"token operator\">:</span> echo1\n\necho1<span class=\"token operator\">:</span>\n @echo Hello World</code></pre></div>\n<h2>Funzioni</h2>\n<p>Unâ€™altro costrutto utile Ã¨ quello della dichiarazione di funzioni. La sintassi per richiamare una funzione Ã¨ la seguente:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">$<span class=\"token punctuation\">(</span>function<span class=\"token operator\">-</span>name arg1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> argn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n$<span class=\"token punctuation\">(</span>call function<span class=\"token operator\">-</span>name<span class=\"token punctuation\">,</span>arg1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>argn<span class=\"token punctuation\">)</span></code></pre></div>\n<p>mentre la sua dichiarazione Ã¨ la seguente:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">define nome_funzione\n corpo della funzione\n posso usare $<span class=\"token number\">1</span> per accedere al primo parametro\n posso usare $<span class=\"token number\">2</span> per accedere al secondo parametro\n e via dicendo\nendef</code></pre></div>\n<p>questo un esempio completo:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>DEFAULT_GOAL <span class=\"token operator\">:</span><span class=\"token operator\">=</span> scoping_issue\n\ndefine parent\n echo <span class=\"token string\">\"parent has two parameters: $1, $2\"</span>\n $<span class=\"token punctuation\">(</span>call child $<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nendef\n\ndefine child\n echo <span class=\"token string\">\"child has one parameter: $1\"</span>\n echo <span class=\"token string\">\"but child can also see parent's second parameter: $2!\"</span>\nendef\n\nscoping_issue<span class=\"token operator\">:</span>\n @$<span class=\"token punctuation\">(</span>call parent one two<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Tips</h2>\n<h3>Formattazione</h3>\n<p>Lâ€™<strong>identazione</strong> Ã¨ configurata di default con i TAB, per modificare questo aspetto usare la variabile .RECIPEPREFIX</p>\n<h3>Shell di default</h3>\n<p>Si puÃ² impostare la shell di default con la variabile SHELL</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">SHELL<span class=\"token operator\">=</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\n\ncool<span class=\"token operator\">:</span>\n    echo <span class=\"token string\">\"Hello from bash\"</span></code></pre></div>\n<h3>Utilizzare file .env</h3>\n<p>Con docker e docker-compose ci siamo abituati a sfruttare al massimo le variabili di ambiente, per configurare a paritÃ  di file ambienti di distribuzione diversa. I Makefile sfruttano le variabili attualmente in uso nella shell. Un trucco per poter avere anche in questo contesto i nostri amati .env Ã¨ lâ€™utilizzo di questo snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">ifneq</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">,</span>$<span class=\"token punctuation\">(</span>wildcard <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    include <span class=\"token punctuation\">.</span>env\n    export\nendif</code></pre></div>\n<h2>Conclusione</h2>\n<p>Questo post non vuole essere una guida esaustiva anzi come il resto del blog Ã¨ un appunto personale che spero possa essere utile anche per qualcunâ€™altro. Ovviamente andrÃ² ad integrare in futuro sullo stesso post se dovessi utilizzare altri costrutti di make.</p>\n<p>Da questo primo utilizzo posso dire che i Makefile possono essere utilizzati per automatizzare i comandi piÃ¹ ricorrenti in ambito docker ma anche in fase di sviluppo puÃ² tornare utili. Sono molto comodi per aprire vscode con parametri particolari e uguali per tutto il team dev o per wrappare i comandi git per esempio in modo da garantire che prima di una commit vena eseguito un pull del repository per esempio.</p>\n<p>Conto di ritornare su questo post perchÃ¨ sono sicuro di aver solo scalfito le potenzialitÃ  di questo strumento.</p>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://makefiletutorial.com/\">https://makefiletutorial.com/</a></li>\n<li><a href=\"https://alexharv074.github.io/2019/12/26/gnu-make-for-devops-engineers.html\">https://alexharv074.github.io/2019/12/26/gnu-make-for-devops-engineers.html</a></li>\n<li><a href=\"https://lithic.tech/blog/2020-05/makefile-dot-env\">https://lithic.tech/blog/2020-05/makefile-dot-env</a></li>\n</ul>\n<blockquote>\n<p>Non aspettatetvi dei problemi, perchÃ¨ tendono a non deludere le aspettative. (Napoleon Hill)</p>\n</blockquote>","frontmatter":{"title":"Makefile e DevOps, una breve guida","date":"27 February 2021","description":null,"tags":["ComputerScience"]}},"previous":{"fields":{"slug":"/2021-02-15-ansible/"},"frontmatter":{"title":"Ansible, una breve guida"}},"next":{"fields":{"slug":"/2021-03-15-recuperare-webcam-ck77-94v-0/"},"frontmatter":{"title":"Recuperare una webcam ck77 94v-0 da un vecchio portatile"}}},"pageContext":{"id":"f56c0db8-5442-5f53-bd2f-faf5d0ae8381","previousPostId":"ebad2215-c60e-5d7e-8516-83d99f0505ef","nextPostId":"756e3537-2ae3-5360-bf44-1d6e29602937"}},"staticQueryHashes":["2114561082"],"slicesMap":{}}