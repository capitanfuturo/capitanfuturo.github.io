{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-08-01-github-runner-ecr/","result":{"data":{"site":{"siteMetadata":{"title":"Capitanfuturo"}},"markdownRemark":{"id":"d7c8ee7f-f453-54d4-93e4-0d8ee319f2c0","excerpt":"üíæ Premessa Da un paio di anni sto utilizzando il piano free tier di Gitlab nell‚Äôazienda in cui lavoro. Gitlab √® diventato un prodotto molto completo e utile‚Ä¶","html":"<h2>üíæ Premessa</h2>\n<p>Da un paio di anni sto utilizzando il piano free tier di Gitlab nell‚Äôazienda in cui lavoro. Gitlab √® diventato un prodotto molto completo e utile per un team di dev. Da un paio di mesi sul blog ufficiale √® uscita questa notizia <a href=\"https://about.gitlab.com/blog/2022/03/24/efficient-free-tier/\">https://about.gitlab.com/blog/2022/03/24/efficient-free-tier/</a> che mette delle restrizioni sul numero di utenti per namespace. Questa limitazione che impatta meno del 2% dell‚Äôutenza ci ha posto davanti ad alcune considerazioni sui costi dello strumento e ci ha fatto optare nel provare altre strade.</p>\n<p>Il post di oggi racconta questo percorso di migrazione dei progetti e dei processi di CI/CD da GitLab a GitHub + AWS ECR. Quest‚Äôultima accoppiata √® dettata dal fatto che produciamo stack di container per i nostri progetti e cerchiamo con questo approccio di migliorare i processi di DevOps.</p>\n<h2>üí• Obiettivo</h2>\n<p>Sfruttare al massimo i servizi gratuiti e self hosted per minimizzare i costi dei processi di CI/CD</p>\n<h2>üóíÔ∏è Occorrente</h2>\n<p>Per raggiungere il nostro obiettivo abbiamo fatto delle prove partendo da alcuni pezzi infrastrutturali. Non andr√≤ nel dettaglio dando per scontato che alcuni aspetti sono ben documentati nelle reference ufficiali.</p>\n<ul>\n<li>Account AWS, utenza dedicata per scrittura su ECR: creazione di repository e pubblicazione di immagini docker.</li>\n<li>Macchina con installato un docker engine su cui eseguire i runner di github in modalit√† self-hosted.</li>\n<li>Account GitHub</li>\n</ul>\n<h2>üèÉ Runner GitHub self hosted</h2>\n<p>Per prima cosa abbiamo predisposto un runner per eseguire le actions di github. La scelta √® ricaduta su un‚Äôimmagine custom <a href=\"https://github.com/myoung34/docker-github-actions-runner\">myoung34/docker-github-actions-runner</a>.</p>\n<p>Questa immagine ha il pregio di funzionare nelle diverse modalit√†: per repository, per organization e per enterprise. Nel nostro caso volendo rimanere nella fascia free tier abbiamo impostao il livello di organization. Il runner si auto registra attraverso un PAT: personal access token generato da un owner dell‚Äôorganizzazione: <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a>.</p>\n<p>Per poter eseguire in contemporanea un numero di runner maggiore a 1 √® necessario scrivere un docker-compose con il numero di service voluti e di dedicare delle working directory diverse per runner. Abbiamo visto infatti che senza una persistenza sul host il meccanismo non sempre funzionava. Ecco un esempio di compose:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2.3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">runner</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> myoung34/github<span class=\"token punctuation\">-</span>runner<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">ACCESS_TOKEN</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>github personal access token<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">RUNNER_SCOPE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'org'</span>\n      <span class=\"token key atrule\">ORG_NAME</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>your organization name<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">RUNNER_WORKDIR</span><span class=\"token punctuation\">:</span> /tmp/runner/work\n      <span class=\"token key atrule\">AWS_ACCESS_KEY_ID</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>aws access key<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">AWS_SECRET_ACCESS_KEY</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>aws secret<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">security_opt</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># needed on SELinux systems to allow docker container to manage other docker containers</span>\n      <span class=\"token punctuation\">-</span> label<span class=\"token punctuation\">:</span>disable\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'/var/run/docker.sock:/var/run/docker.sock'</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'/tmp/runner:/tmp/runner'</span></code></pre></div>\n<p>Da notare che abbiamo aggiunto delle variabili di ambiente che utilizzeremo in seguito. ‚ö†Ô∏è Da notare che questo meccanismo che non sfrutta i secret di github (a pagamento) ha dei problemi di sicurezza.</p>\n<h2>GitHub workflow</h2>\n<p>GitHub mette a disposizione l‚Äôesecuzione di job costituiti da step a seguito di alcuni eventi, come per esempio al push su un branch. Con questo meccanismo di workflow possiamo costruire la nostra CI/CD. I file descrittivi sono in formato YAML e vanno scritti nella cartella <code class=\"language-text\">.github/workflows</code>.</p>\n<p>Una volta compilata la nostra immagine docker con una action specifica andiamo a pubblicare su AWS ECR. Per farlo abbiamo trovato utile utilizzare la seguente action <a href=\"https://github.com/kciter/aws-ecr-action\">kciter/aws-ecr-action</a>. Per accedere ad AWS abbiamo bisogno di autenticarci con una secret key e senza usare i secret di github si pu√≤ pensare di passare al container del runner le credenziali e poi iniettarle nella action con il metodo che segue. Riporto un esempio di un file yaml che esegue il checkout di un repository, ne fa un‚Äôimmagine docker e la pubblica su ECR.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Publish\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">AWS_ACCOUNT_ID</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>aws id number<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">AWS_REGION</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>aws region<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">ECR_REPOSITORY</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>base repository<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-publish</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">-</span>hosted\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set AWS_ACCESS_KEY_ID\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"AWS_ACCESS_KEY_ID=$(echo $AWS_ACCESS_KEY_ID)\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set AWS_SECRET_ACCESS_KEY\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"AWS_SECRET_ACCESS_KEY=$(echo $AWS_SECRET_ACCESS_KEY)\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Get branch name\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> branch<span class=\"token punctuation\">-</span>name\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> tj<span class=\"token punctuation\">-</span>actions/branch<span class=\"token punctuation\">-</span>names@v5.2\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout source code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and push docker image to AWS ECR\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> kciter/aws<span class=\"token punctuation\">-</span>ecr<span class=\"token punctuation\">-</span>action@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">access_key_id</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.AWS_ACCESS_KEY_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">secret_access_key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.AWS_SECRET_ACCESS_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">account_id</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.AWS_ACCOUNT_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.ECR_REPOSITORY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>/$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.branch<span class=\"token punctuation\">-</span>name.outputs.current_branch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.AWS_REGION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> latest<span class=\"token punctuation\">,</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.sha <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">create_repo</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> ./docker/Dockerfile\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> .</code></pre></div>\n<h2>Deploy</h2>\n<p>Una volta costruito il meccanismo di build e pubblicazione degli artefatti non ci resta che predisporre la macchina target per il deploy.</p>\n<p>Per accedere al repository √® necessario usare la AWS CLI in cascata con docker login.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws ecr get-login-password <span class=\"token operator\">|</span> <span class=\"token function\">docker</span> login <span class=\"token parameter variable\">--username</span> AWS --password-stdin ***.dkr.ecr.eu-central-1.amazonaws.com</code></pre></div>\n<h2>Conclusione</h2>\n<p>Quello che ho descritto √® una POC che potrebbe essere utilizzata per piccole realt√† IT che vogliano contenere i costi degli strumenti di sviluppo. Personalmente credo che i soldi investiti per account di team su github o gitlab siano ben spesi.</p>\n<p>In ogni caso ho imparato molto da questo esperimento.</p>","frontmatter":{"title":"GitHub runner self-hosted + AWS ECR docker registry","date":"01 August 2022","description":null,"tags":["Software"]}},"previous":{"fields":{"slug":"/2022-07-01-sapiens/"},"frontmatter":{"title":"Sapiens. Da animali a d√®i: Breve storia dell'umanit√†. (Harari)"}},"next":{"fields":{"slug":"/2022-09-01-laws-of-human-stupidity/"},"frontmatter":{"title":"The basic laws of human stupidity. (Cipolla)"}}},"pageContext":{"id":"d7c8ee7f-f453-54d4-93e4-0d8ee319f2c0","previousPostId":"cd335788-f789-5827-996c-bc9e10f092fe","nextPostId":"d419f250-c022-5ca6-a299-bb1732e99503"}},"staticQueryHashes":["2114561082"],"slicesMap":{}}